1)@Child, define function
  const functionInChild = (): void => {
      alert("Hello");
    };

2)@Child, define interface and import in parent
export interface ChildRef {
  functionInChild: () => void;
}

3)@Parent, Create one ref
const childRef = useRef<ChildRef>(null);

4)@Parent, pass ref to child
<Child updateLocalData={updateLocalData} ref={childRef} />

5)@Child Recieve props as second argument
export const Child = ({ updateLocalData }, ref) => {}
  
  
6)@Child, Wrap component fucntion with forwardRef
ie. const Child = forwardRef<>()

export const Child = forwardRef<ChildRef, ChildProps>(
  ({ updateLocalData }, ref) => {




7)@Child -- useImperativeHandle, function written inside this will accessible to parent

  useImperativeHandle(ref, () => ({
      functionInChild,
    }));

      
8) @Parent, create button
<button onClick={callChildFunction}>Function in Parent</button>

9) @Parent, create local function
  const callChildFunction = (): void => {
    if (childRef.current) {
      childRef.current.functionInChild();
    }
  };


